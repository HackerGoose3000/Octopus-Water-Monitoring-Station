# Octopus-Water-Monitoring-Station

#include <WiFi.h>              // Include the WiFi library for network functionality
#include <ESPAsyncWebServer.h>  // Include the AsyncWebServer library for serving web pages
#include <OneWire.h>            // Include the OneWire library for communication with DS18B20 temperature sensor
#include <DallasTemperature.h>  // Include the DallasTemperature library to easily handle DS18B20 sensors
#include <Wire.h>               // Include the Wire library for I2C communication with LCD
#include <LiquidCrystal_I2C.h>  // Include the LiquidCrystal_I2C library for LCD display

// WiFi credentials
const char* ssid = "ATTTUtxUNe 2.4";  // Define the SSID for WiFi connection
const char* password = "ygtv#4f2qruv"; // Define the WiFi password

// Sensor pins
const int oneWireBus = 33;      // Pin for DS18B20 temperature sensor
const int soilSensorPin = 35;   // Pin for soil moisture sensor
const int orpPin = 39;          // Pin for ORP sensor
const int waterSensorPin = 32;  // Pin for water level sensor
const int turbidityPin = 26;    // Pin for turbidity sensor (digital)
const int tdsSensorPin = 36;    // Pin for TDS sensor
const int flowSensorPin = 27;   // Pin for flow rate sensor
const int pHSensorPin = 34;     // Pin for pH sensor

// Variables
OneWire oneWire(oneWireBus);     // Initialize the OneWire object for the DS18B20 sensor
DallasTemperature sensors(&oneWire); // Initialize the DallasTemperature object

volatile byte pulseCount = 0;    // Variable to count pulses from the flow sensor
float flowRate = 0.0;            // Variable to store the flow rate value
float temperatureC = 0.0;        // Variable to store the temperature in Celsius
int soilMoisture = 0;            // Variable to store the soil moisture level
String turbidity;                // String to store turbidity status (HIGH/LOW)
float tdsValue = 0.0;            // Variable to store the TDS value
float orpValue = 0.0;            // Variable to store the ORP value
int waterLevel = 0;              // Variable to store the water level value
float pHValue = 0.0;             // Variable to store the pH value

// LCD setup
LiquidCrystal_I2C lcd(0x3F, 16, 2);  // Initialize the LCD with address 0x3F and a 16x2 display
int lcdDelay = 2000;                // Delay time for LCD display updates

// Web server instance
AsyncWebServer server(80); // Create an instance of the asynchronous web server running on port 80

// Time tracking for 5-second updates
unsigned long lastUpdateTime = 0;           // Variable to store the last update time
const unsigned long updateInterval = 5000;  // Set the interval for updates to 5 seconds (5000 milliseconds)

// Function to count pulses from the flow sensor
void IRAM_ATTR pulseCounter() {
  pulseCount++;  // Increment the pulse count whenever a pulse is detected
}

// Function to read sensor data
void readSensors() {
  // Temperature sensor
  sensors.requestTemperatures(); // Request temperature readings from DS18B20
  temperatureC = sensors.getTempCByIndex(0); // Get the temperature value in Celsius

  // Soil moisture sensor
  soilMoisture = analogRead(soilSensorPin); // Read the value from the soil moisture sensor

  // Turbidity sensor (digital)
  if (digitalRead(turbidityPin) == HIGH) { // Check if the turbidity sensor is HIGH
    turbidity = "HIGH"; // Set turbidity to "HIGH" if detected
  } else {
    turbidity = "LOW";  // Set turbidity to "LOW" if not detected
  }

  // TDS sensor
  int tdsRaw = analogRead(tdsSensorPin); // Read raw data from TDS sensor
  float voltageTDS = tdsRaw * (3.3 / 4095.0); // Convert the raw value to voltage
  float compensationVoltage = voltageTDS / (1.0 + 0.02 * (temperatureC - 25.0)); // Apply temperature compensation
  tdsValue = (133.42 * compensationVoltage * compensationVoltage * compensationVoltage -
              255.86 * compensationVoltage * compensationVoltage +
              857.39 * compensationVoltage) * 0.5; // Calculate the TDS value in ppm

  // Water level sensor
  waterLevel = analogRead(waterSensorPin); // Read the water level sensor value

  // ORP sensor
  static int orpArray[40]; // Array to store ORP sensor readings
  static int orpArrayIndex = 0; // Index to keep track of the ORP array position
  orpArray[orpArrayIndex++] = analogRead(orpPin); // Store the ORP sensor reading in the array
  if (orpArrayIndex == 40) orpArrayIndex = 0; // Reset index after 40 readings
  float averageOrp = 0.0; // Variable to store the average ORP value
  for (int i = 0; i < 40; i++) averageOrp += orpArray[i]; // Sum the ORP readings
  averageOrp /= 40.0; // Calculate the average ORP value
  orpValue = ((5.0 * averageOrp / 4095.0) * 1000) - 2380; // Adjust the average ORP value based on the sensor range

  // Flow rate sensor
  flowRate = (pulseCount / 7.5); // Calculate the flow rate from pulse count (calibration needed)
  pulseCount = 0; // Reset the pulse count after calculation

  // pH sensor
  int rawPH = analogRead(pHSensorPin); // Read the raw value from the pH sensor
  float voltagePH = rawPH * (3.3 / 4095.0); // Convert the raw value to voltage
  pHValue = 3.3 * voltagePH; // Calculate the pH value (adjust based on your sensor calibration)
}

// Function to calculate percentage for Soil Moisture and Water Level
float soilMoisturePercent() {
  // Reverse the mapping logic: More moisture -> higher percentage
  return map(soilMoisture, 0, 4095, 100, 0);  // Map the sensor range to percentage
}

float waterLevelPercent() {
  // Reverse the mapping logic: More water -> higher percentage
  return map(waterLevel, 0, 4095, 0, 100);  // Map the water level range to percentage
}

void setup() {
  Serial.begin(9600); // Initialize the serial monitor at 9600 baud rate

  // Initialize LCD
  Wire.begin();                // Initialize I2C communication
  lcd.begin(16, 2);            // Initialize the 16x2 LCD display
  lcd.setBacklight(1);         // Turn on the LCD backlight

  // WiFi connection
  WiFi.begin(ssid, password); // Start connecting to WiFi using defined SSID and password
  unsigned long startTime = millis(); // Record the start time of the connection attempt

  while (WiFi.status() != WL_CONNECTED) { // Continue looping until WiFi is connected
    delay(1000); // Wait for 1 second between connection attempts
    Serial.println("Connecting to WiFi..."); // Print a message on the serial monitor
    lcd.clear(); // Clear the LCD screen
    lcd.print("Connecting WiFi..."); // Show the message on the LCD

    if (millis() - startTime > 10000) {  // 10 seconds timeout
      Serial.println("Failed to connect to WiFi."); // Print a failure message after 10 seconds
      lcd.clear(); // Clear the LCD screen
      lcd.print("WiFi Failed"); // Display "WiFi Failed" on the LCD
      delay(2000); // Wait for 2 seconds before proceeding
      break;  // Exit the loop after 10 seconds
    }
  }

  if (WiFi.status() == WL_CONNECTED) { // If WiFi connection is successful
    Serial.println("Connected to WiFi!"); // Print a success message
    lcd.clear(); // Clear the LCD
    lcd.print("Connected WiFi!"); // Display "Connected WiFi!" on the LCD
    delay(2000); // Wait for 2 seconds
    lcd.clear(); // Clear the LCD screen
    lcd.print("IP: "); // Display "IP: " on the LCD
    lcd.setCursor(1,1);
    lcd.print(WiFi.localIP());  // Display the ESP32's IP address
    Serial.println(WiFi.localIP()); // Print the IP address on the serial monitor
    delay(2000); // Wait for 2 seconds
  }

  // Initialize sensors
  sensors.begin();  // Initialize the temperature sensor
  pinMode(turbidityPin, INPUT);  // Set the turbidity sensor pin as input
  pinMode(flowSensorPin, INPUT_PULLUP); // Set the flow sensor pin as input with a pull-up resistor
  attachInterrupt(digitalPinToInterrupt(flowSensorPin), pulseCounter, FALLING); // Set up an interrupt to count pulses on the flow sensor pin

  // Start web server
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
    // Serve the HTML page when the root URL is accessed
    request->send_P(200, "text/html; charset=utf-8", R"rawliteral(
      <!DOCTYPE html>
      <html>
      <head>
        <title>ESP32 Sensor Dashboard</title>
        <script>
          function fetchData() {
            fetch('/data').then(response => response.json()).then(data => {
              document.getElementById('temperature').innerText = data.temperatureC + " Â°C";
              document.getElementById('soilMoisture').innerText = data.soilMoisture + "%";
              document.getElementById('turbidity').innerText = data.turbidity;
              document.getElementById('tds').innerText = data.tds + " ppm";
              document.getElementById('orp').innerText = data.orp + " mV";
              document.getElementById('waterLevel').innerText = data.waterLevel + "%";
              document.getElementById('flowRate').innerText = data.flowRate + " L/min";
              document.getElementById('pH').innerText = data.pH.toFixed(2);
            });
          }
          setInterval(fetchData, 1000); // Update the data every second
        </script>
      </head>
      <body>
        <h1>ESP32 Sensor Dashboard</h1>
        <p>Temperature: <span id="temperature"></span></p>
        <p>Soil Moisture: <span id="soilMoisture"></span></p>
        <p>Turbidity: <span id="turbidity"></span></p>
        <p>TDS: <span id="tds"></span></p>
        <p>ORP: <span id="orp"></span></p>
        <p>Water Level: <span id="waterLevel"></span></p>
        <p>Flow Rate: <span id="flowRate"></span></p>
        <p>pH: <span id="pH"></span></p>
      </body>
      </html>
    )rawliteral");
  });

  server.on("/data", HTTP_GET, [](AsyncWebServerRequest *request) {
    // Read sensor data and return a JSON response
    readSensors();
    
    // Prepare a JSON response with sensor data
    String json = "{";
    json += "\"temperatureC\":" + String(temperatureC, 2) + ","; 
    json += "\"soilMoisture\":" + String(soilMoisturePercent()) + ","; 
    json += "\"turbidity\":\"" + turbidity + "\","; 
    json += "\"tds\":" + String(tdsValue, 2) + ","; 
    json += "\"orp\":" + String(orpValue, 2) + ","; 
    json += "\"waterLevel\":" + String(waterLevelPercent()) + ","; 
    json += "\"flowRate\":" + String(flowRate, 2) + ","; 
    json += "\"pHValue\":" + String(pHValue, 2);
    json += "}";
    request->send(200, "application/json", json); // Send the JSON data as a response
  });

  server.begin(); // Start the server
}

void loop() {
  unsigned long currentTime = millis(); // Get the current time
  if (currentTime - lastUpdateTime >= updateInterval) { // If 5 seconds have passed
    lastUpdateTime = currentTime; // Update the last update time

    // Read sensor data
    readSensors();

    // Display the sensor values on the LCD
    lcd.clear();  // Clear the display

    lcd.setCursor(0, 0); // Set the cursor to the first line
    lcd.print("Temp: " + String(temperatureC, 1) + "C"); // Display temperature

    lcd.setCursor(0, 1); // Set the cursor to the second line
    lcd.print("Soil: " + String(soilMoisturePercent()) + "%"); // Display soil moisture

    delay(lcdDelay); // Wait for a moment before updating the display
    lcd.clear(); // Clear the display

    lcd.setCursor(0, 0); // Set the cursor back to the first line
    lcd.print("pH: " + String(pHValue, 1)); // Display pH value

    lcd.setCursor(0, 1); // Set the cursor to the second line
    lcd.print("Flow: " + String(flowRate, 1) + "L/min"); // Display flow rate

    delay(lcdDelay); // Wait for a moment before updating the display
    lcd.clear(); // Clear the display

    lcd.setCursor(0, 0); // Set the cursor to the first line
    lcd.print("Turb: " + turbidity); // Display turbidity status

    lcd.setCursor(0, 1); // Set the cursor to the second line
    lcd.print("TDS: " + String(tdsValue, 1) + "ppm"); // Display TDS value

    delay(lcdDelay); // Wait for a moment before updating the display
    lcd.clear(); // Clear the display

    lcd.setCursor(0, 0); // Set the cursor to the first line
    lcd.print("ORP: " + String(orpValue, 1) + "mV"); // Display ORP value

    lcd.setCursor(0, 1); // Set the cursor to the second line
    lcd.print("Water: " + String(waterLevelPercent()) + "%"); // Display water level

    delay(lcdDelay); // Wait for a moment before updating the display
    lcd.clear(); // Clear the display

    lcd.print("Link:");// Display for formatting
    lcd.setCursor(1,1);// Set sursor to second line
    lcd.print(WiFi.localIP());  // Display the ESP32's IP address
    delay(lcdDelay); // Wait for a moment before updating the display
  }
}

